# Bat Individual-based Model

# -------------------------------
# 3D Individual-Based Model: Bats, Roosts, Foraging Areas with Memory and Roost-Site Fidelity
# -------------------------------

library(rgl)

# Simulation Parameters (modifiable)
num_time_steps      <- 720           # Total time steps (minutes; 12 hours)
num_bats            <- 300           # Number of bats
calorie_loss        <- 0.5           # Calorie loss per time step (movement cost)
target_calories     <- 100           # Bats stop foraging when full
return_time         <- 660           # After 11 hours (660 minutes), bats return to roost
move_step           <- 1             # Distance moved per time step
tolerance           <- 0.1           # Tolerance for "arriving" at a target

# New parameters:
memory_weight       <- 0.7           # Weight given to memory vs. distance when selecting a foraging patch
roost_fidelity_rate <- 0.8           # Probability a bat sticks with its original roost when returning
roost_crowd_threshold <- 50          # If a roost has more than this number of bats, it is considered crowded

# -------------------------------
# Define Roost Sites in 3D (all at z = 0)
roost_sites <- data.frame(
  x = c(25, 50, 75),
  y = c(0, 0, 0),
  z = c(0, 0, 0)
)

# -------------------------------
# Define Foraging Areas in 3D: Each area is a cubic volume with a grid of cells.
set.seed(123)  # For reproducibility
num_foraging_areas <- 3
foraging_areas <- list()
area_size <- 10  # Side length of each cubic foraging area

for(i in 1:num_foraging_areas) {
  # Random center with y >= 50
  center_x <- runif(1, min = area_size/2, max = 100 - area_size/2)
  center_y <- runif(1, min = 50 + area_size/2, max = 100 - area_size/2)
  center_z <- runif(1, min = area_size/2, max = 100 - area_size/2)
  
  area_bounds <- list(
    x_range = c(center_x - area_size/2, center_x + area_size/2),
    y_range = c(center_y - area_size/2, center_y + area_size/2),
    z_range = c(center_z - area_size/2, center_z + area_size/2)
  )
  
  # Create a grid of cells (cell size = 1) within the area.
  x_cells <- seq(area_bounds$x_range[1], area_bounds$x_range[2], by = 1)
  y_cells <- seq(area_bounds$y_range[1], area_bounds$y_range[2], by = 1)
  z_cells <- seq(area_bounds$z_range[1], area_bounds$z_range[2], by = 1)
  
  # Each cell gets a prey count randomly between 5 and 15.
  prey_array <- array(sample(5:15, length(x_cells) * length(y_cells) * length(z_cells), replace = TRUE),
                      dim = c(length(x_cells), length(y_cells), length(z_cells)),
                      dimnames = list(x = as.character(x_cells),
                                      y = as.character(y_cells),
                                      z = as.character(z_cells)))
  
  # Store center of area for targeting.
  center <- c(center_x, center_y, center_z)
  
  foraging_areas[[i]] <- list(bounds = area_bounds, prey = prey_array, center = center)
}

# -------------------------------
# Initialize Bats in 3D and Their Memory
set.seed(123)  # For reproducibility
bats <- data.frame(
  id = 1:num_bats,
  x  = roost_sites$x[sample(1:nrow(roost_sites), num_bats, replace = TRUE)],
  y  = roost_sites$y[sample(1:nrow(roost_sites), num_bats, replace = TRUE)],
  z  = roost_sites$z[sample(1:nrow(roost_sites), num_bats, replace = TRUE)],
  calories = rep(100, num_bats),
  state = rep("to_forage", num_bats),
  target_x = NA,
  target_y = NA,
  target_z = NA,
  orig_roost_x = NA,
  orig_roost_y = NA,
  orig_roost_z = NA
)

# Record each bat's original roost (for later return)
for (i in 1:nrow(bats)) {
  bats$orig_roost_x[i] <- bats$x[i]
  bats$orig_roost_y[i] <- bats$y[i]
  bats$orig_roost_z[i] <- bats$z[i]
}

# Initialize bat memory: rows = bats, columns = foraging areas.
# This memory could represent the cumulative gain from each patch.
bat_memory <- matrix(0, nrow = num_bats, ncol = num_foraging_areas)

# Initial assignment of targets for foraging: use memory & distance.
for (i in 1:nrow(bats)) {
  available <- sapply(foraging_areas, function(fa) { sum(fa$prey) > 0 })
  if(any(available)) {
    scores <- rep(0, num_foraging_areas)
    for(p in 1:num_foraging_areas){
      if(available[p]){
        center <- foraging_areas[[p]]$center
        d <- sqrt((center[1] - bats$x[i])^2 +
                    (center[2] - bats$y[i])^2 +
                    (center[3] - bats$z[i])^2)
        if(d == 0) d <- 0.0001
        scores[p] <- memory_weight * bat_memory[i, p] + (1 - memory_weight) * (1 / d)
      }
    }
    chosen <- which.max(scores)
    chosen_area <- foraging_areas[[chosen]]
    bats$target_x[i] <- chosen_area$center[1]
    bats$target_y[i] <- chosen_area$center[2]
    bats$target_z[i] <- chosen_area$center[3]
  } else {
    bats$target_x[i] <- bats$x[i]
    bats$target_y[i] <- bats$y[i]
    bats$target_z[i] <- bats$z[i]
  }
}

# -------------------------------
# Helper Function: Move a bat toward its target with a simple repulsion component.
move_with_repulsion <- function(i, bats, step, repulsion_radius = 3) {
  current_pos <- c(bats$x[i], bats$y[i], bats$z[i])
  target_pos <- c(bats$target_x[i], bats$target_y[i], bats$target_z[i])
  desired_dir <- target_pos - current_pos
  norm_desired <- sqrt(sum(desired_dir^2))
  if(norm_desired != 0){
    desired_dir <- desired_dir / norm_desired
  }
  
  # Compute repulsion from nearby bats.
  repulsion <- c(0, 0, 0)
  for(j in 1:nrow(bats)) {
    if(j != i) {
      other_pos <- c(bats$x[j], bats$y[j], bats$z[j])
      distance <- sqrt(sum((current_pos - other_pos)^2))
      if(distance < repulsion_radius && distance > 0) {
        repulsion <- repulsion + (current_pos - other_pos) / (distance^2)
      }
    }
  }
  
  combined <- desired_dir + repulsion
  norm_combined <- sqrt(sum(combined^2))
  if(norm_combined == 0) return(current_pos)
  new_pos <- current_pos + (combined / norm_combined) * step
  return(new_pos)
}

# -------------------------------
# Set up Plot Limits for a 100x100x100 Canvas
plot_lim <- list(xlim = c(0, 100), ylim = c(0, 100), zlim = c(0, 100))

# -------------------------------
# Simulation Loop
for (t in 1:num_time_steps) {
  
  # Update each bat's state and target assignment
  for (i in 1:nrow(bats)) {
    if(t >= return_time) {
      # Returning: check roost occupancy.
      # Identify the roost the bat would normally return to:
      orig_roost <- c(bats$orig_roost_x[i], bats$orig_roost_y[i], bats$orig_roost_z[i])
      
      # Count occupancy at each roost.
      roost_occ <- sapply(1:nrow(roost_sites), function(r) {
        sum(abs(bats$x - roost_sites$x[r]) < tolerance &
              abs(bats$y - roost_sites$y[r]) < tolerance &
              abs(bats$z - roost_sites$z[r]) < tolerance)
      })
      
      # Determine the index of the bat's original roost.
      orig_idx <- which(roost_sites$x == orig_roost[1] &
                          roost_sites$y == orig_roost[2] &
                          roost_sites$z == orig_roost[3])
      
      # If original roost is too crowded and fidelity is not high, choose alternative.
      if(roost_occ[orig_idx] > roost_crowd_threshold && runif(1) > roost_fidelity_rate) {
        alt_idx <- which.min(roost_occ)
        bats$target_x[i] <- roost_sites$x[alt_idx]
        bats$target_y[i] <- roost_sites$y[alt_idx]
        bats$target_z[i] <- roost_sites$z[alt_idx]
      } else {
        bats$target_x[i] <- orig_roost[1]
        bats$target_y[i] <- orig_roost[2]
        bats$target_z[i] <- orig_roost[3]
      }
      bats$state[i] <- "returning"
      
    } else {
      # Not returning: Check if bat is inside any foraging area.
      in_area <- FALSE
      for (fa in foraging_areas) {
        if(bats$x[i] >= fa$bounds$x_range[1] && bats$x[i] <= fa$bounds$x_range[2] &&
           bats$y[i] >= fa$bounds$y_range[1] && bats$y[i] <= fa$bounds$y_range[2] &&
           bats$z[i] >= fa$bounds$z_range[1] && bats$z[i] <= fa$bounds$z_range[2]) {
          in_area <- TRUE
          current_area <- fa
          # Record which patch (index) the bat is in.
          patch_index <- which(sapply(foraging_areas, identical, current_area))
          break
        }
      }
      
      if(in_area) {
        # Inside a foraging area: forage if not full.
        if(bats$calories[i] < target_calories) {
          bats$state[i] <- "foraging"
          bats$target_x[i] <- bats$x[i]
          bats$target_y[i] <- bats$y[i]
          bats$target_z[i] <- bats$z[i]
        } else {
          bats$state[i] <- "returning"
          # When switching to returning, use roost rules (handled above on next iteration).
          bats$target_x[i] <- bats$orig_roost_x[i]
          bats$target_y[i] <- bats$orig_roost_y[i]
          bats$target_z[i] <- bats$orig_roost_z[i]
        }
      } else {
        # Not in any foraging area: choose foraging patch based on memory and distance.
        if(bats$state[i] != "returning") {
          available <- sapply(foraging_areas, function(fa) { sum(fa$prey) > 0 })
          if(any(available)) {
            scores <- rep(0, num_foraging_areas)
            for(p in 1:num_foraging_areas){
              if(available[p]){
                center <- foraging_areas[[p]]$center
                d <- sqrt((center[1] - bats$x[i])^2 +
                            (center[2] - bats$y[i])^2 +
                            (center[3] - bats$z[i])^2)
                if(d == 0) d <- 0.0001
                scores[p] <- memory_weight * bat_memory[i, p] + (1 - memory_weight) * (1 / d)
              }
            }
            chosen <- which.max(scores)
            chosen_area <- foraging_areas[[chosen]]
            bats$target_x[i] <- chosen_area$center[1]
            bats$target_y[i] <- chosen_area$center[2]
            bats$target_z[i] <- chosen_area$center[3]
            bats$state[i] <- "to_forage"
          } else {
            bats$state[i] <- "returning"
            bats$target_x[i] <- bats$orig_roost_x[i]
            bats$target_y[i] <- bats$orig_roost_y[i]
            bats$target_z[i] <- bats$orig_roost_z[i]
          }
        }
      }
    }
  }
  
  # Move each bat using the move_with_repulsion function and prevent overlap (unless at a roost)
  for (i in 1:nrow(bats)) {
    if(!(abs(bats$x[i] - bats$target_x[i]) < tolerance &&
         abs(bats$y[i] - bats$target_y[i]) < tolerance &&
         abs(bats$z[i] - bats$target_z[i]) < tolerance)) {
      new_pos <- move_with_repulsion(i, bats, step = move_step, repulsion_radius = 3)
      # Check if new_pos is at a roost.
      is_roost <- any(abs(new_pos[1] - roost_sites$x) < tolerance &
                        abs(new_pos[2] - roost_sites$y) < tolerance &
                        abs(new_pos[3] - roost_sites$z) < tolerance)
      overlap <- FALSE
      if(!is_roost) {
        for (j in 1:nrow(bats)) {
          if(j != i) {
            dist_between <- sqrt((new_pos[1] - bats$x[j])^2 +
                                   (new_pos[2] - bats$y[j])^2 +
                                   (new_pos[3] - bats$z[j])^2)
            if(dist_between < tolerance) {
              overlap <- TRUE
              break
            }
          }
        }
      }
      if(!overlap) {
        bats$x[i] <- new_pos[1]
        bats$y[i] <- new_pos[2]
        bats$z[i] <- new_pos[3]
      }
    }
  }
  
  # Update calories and perform foraging
  for (i in 1:nrow(bats)) {
    bats$calories[i] <- bats$calories[i] - calorie_loss
    if(bats$state[i] == "foraging") {
      for (j in seq_along(foraging_areas)) {
        fa <- foraging_areas[[j]]
        if(bats$x[i] >= fa$bounds$x_range[1] && bats$x[i] <= fa$bounds$x_range[2] &&
           bats$y[i] >= fa$bounds$y_range[1] && bats$y[i] <= fa$bounds$y_range[2] &&
           bats$z[i] >= fa$bounds$z_range[1] && bats$z[i] <= fa$bounds$z_range[2]) {
          # Map bat's position to cell indices by rounding.
          cell_x <- as.character(round(bats$x[i]))
          cell_y <- as.character(round(bats$y[i]))
          cell_z <- as.character(round(bats$z[i]))
          if(cell_x %in% dimnames(fa$prey)$x &&
             cell_y %in% dimnames(fa$prey)$y &&
             cell_z %in% dimnames(fa$prey)$z) {
            idx_x <- which(dimnames(fa$prey)$x == cell_x)
            idx_y <- which(dimnames(fa$prey)$y == cell_y)
            idx_z <- which(dimnames(fa$prey)$z == cell_z)
            if(fa$prey[idx_x, idx_y, idx_z] > 0 && bats$calories[i] < target_calories) {
              gain <- runif(1, min = 2, max = 5)
              bats$calories[i] <- bats$calories[i] + gain
              fa$prey[idx_x, idx_y, idx_z] <- fa$prey[idx_x, idx_y, idx_z] - 1
              foraging_areas[[j]]$prey <- fa$prey
              # Update bat memory for this patch.
              bat_memory[i, j] <- bat_memory[i, j] + gain
            }
          }
          break
        }
      }
    }
  }
  
  # -------------------------------
  # 3D Plotting using rgl
  rgl::clear3d()
  plot3d(NA, type = "n", xlim = plot_lim$xlim, ylim = plot_lim$ylim, zlim = plot_lim$zlim,
         xlab = "X", ylab = "Y", zlab = "Z", main = paste("Time:", t, "minutes"))
  
  # Plot roost sites as red spheres.
  spheres3d(roost_sites$x, roost_sites$y, roost_sites$z, radius = 2, color = "brown")
  
  # Plot foraging areas as semi-transparent cubes.
  for(fa in foraging_areas) {
    bounds <- fa$bounds
    cube <- rgl::cube3d(color = "green", alpha = 0.3)
    cube$vb[1,] <- (cube$vb[1,] + 1)/2 * (bounds$x_range[2] - bounds$x_range[1]) + bounds$x_range[1]
    cube$vb[2,] <- (cube$vb[2,] + 1)/2 * (bounds$y_range[2] - bounds$y_range[1]) + bounds$y_range[1]
    cube$vb[3,] <- (cube$vb[3,] + 1)/2 * (bounds$z_range[2] - bounds$z_range[1]) + bounds$z_range[1]
    rgl::shade3d(cube, col = "green", alpha = 0.3)
  }
  
  # Plot bats as spheres.
  spheres3d(bats$x, bats$y, bats$z, radius = 1, color = "grey")
  
  Sys.sleep(0.05)
}

